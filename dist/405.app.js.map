{"version":3,"file":"./405.app.js","mappings":"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","sources":["webpack://@standardnotes/web/./src/javascripts/Components/SuperEditor/Lexical/Utils/PDFExport/PDFExport.tsx"],"sourcesContent":["import { StyleSheet } from '@react-pdf/renderer';\nimport { $getRoot, $isElementNode, $isParagraphNode, $isLineBreakNode, $isTextNode, } from 'lexical';\nimport { $isLinkNode } from '@lexical/link';\nimport { $isHeadingNode, $isQuoteNode } from '@lexical/rich-text';\nimport { $isListNode, $isListItemNode } from '@lexical/list';\nimport { $isTableNode, $isTableRowNode, $isTableCellNode } from '@lexical/table';\nimport { $isCodeNode } from '@lexical/code';\nimport { $isInlineFileNode } from '../../../Plugins/InlineFilePlugin/InlineFileNode';\nimport { $isRemoteImageNode } from '../../../Plugins/RemoteImagePlugin/RemoteImageNode';\nimport { $isCollapsibleContainerNode } from '../../../Plugins/CollapsiblePlugin/CollapsibleContainerNode';\nimport { $isCollapsibleContentNode } from '../../../Plugins/CollapsiblePlugin/CollapsibleContentNode';\nimport { $isCollapsibleTitleNode } from '../../../Plugins/CollapsiblePlugin/CollapsibleTitleNode';\nimport { wrap } from 'comlink';\nconst styles = StyleSheet.create({\n    page: {\n        paddingVertical: 35,\n        paddingHorizontal: 35,\n        lineHeight: 1.5,\n        fontSize: 12,\n        gap: 14,\n    },\n    block: {\n        gap: 14,\n    },\n    wrap: {\n        flexWrap: 'wrap',\n    },\n    row: {\n        flexDirection: 'row',\n    },\n    column: {\n        flexDirection: 'column',\n    },\n    listMarker: {\n        flexShrink: 0,\n        height: '100%',\n        marginRight: 2,\n    },\n    collapsibleTitle: {\n        backgroundColor: 'rgba(0,0,0,0.05)',\n        paddingTop: 4,\n        paddingBottom: 2,\n        paddingHorizontal: 6,\n        borderTopLeftRadius: 6,\n        borderTopRightRadius: 6,\n    },\n    quote: {\n        borderLeftWidth: 4,\n        color: 'rgba(46, 46, 46)',\n        borderLeftColor: '#72767e',\n        paddingLeft: 12,\n        paddingVertical: 4,\n        gap: 4,\n    },\n});\nconst getListItemNode = ({ children, value, listType, checked, }) => {\n    const marker = listType === 'bullet' ? '\\u2022' : `${value}.`;\n    return {\n        type: 'View',\n        style: styles.row,\n        children: [\n            listType === 'check'\n                ? {\n                    type: 'View',\n                    style: {\n                        width: 14,\n                        height: 14,\n                        borderRadius: 2,\n                        borderWidth: 1,\n                        borderColor: checked ? '#086dd6' : '#000',\n                        backgroundColor: checked ? '#086dd6' : 'transparent',\n                        marginRight: 6,\n                    },\n                    children: checked\n                        ? [\n                            {\n                                type: 'Svg',\n                                viewBox: '0 0 20 20',\n                                fill: '#ffffff',\n                                children: [\n                                    {\n                                        type: 'Path',\n                                        d: 'M17.5001 5.83345L7.50008 15.8334L2.91675 11.2501L4.09175 10.0751L7.50008 13.4751L16.3251 4.65845L17.5001 5.83345Z',\n                                    },\n                                ],\n                            },\n                        ]\n                        : undefined,\n                }\n                : {\n                    type: 'View',\n                    style: styles.listMarker,\n                    children: [\n                        {\n                            type: 'Text',\n                            children: marker + ' ',\n                        },\n                    ],\n                },\n            {\n                type: 'Text',\n                style: {\n                    flex: 1,\n                },\n                children,\n            },\n        ],\n    };\n};\nconst MinimumHeadingFontSize = 13;\nconst MaxHeadingLevel = 6;\nconst getFontSizeForHeading = (heading) => {\n    const level = parseInt(heading.getTag().slice(1));\n    const multiplier = (MaxHeadingLevel - level) * 2;\n    return MinimumHeadingFontSize + multiplier;\n};\nconst getNodeTextAlignment = (node) => {\n    const formatType = node.getFormatType();\n    if (!formatType) {\n        return 'left';\n    }\n    if (formatType === 'start') {\n        return 'left';\n    }\n    if (formatType === 'end') {\n        return 'right';\n    }\n    return formatType;\n};\nconst getPDFDataNodeFromLexicalNode = (node) => {\n    const parent = node.getParent();\n    if ($isLineBreakNode(node)) {\n        return {\n            type: 'Text',\n            children: '\\n',\n        };\n    }\n    if ($isTextNode(node)) {\n        const isInlineCode = node.hasFormat('code');\n        const isCodeNodeText = $isCodeNode(parent);\n        const isBold = node.hasFormat('bold');\n        const isItalic = node.hasFormat('italic');\n        const isHighlight = node.hasFormat('highlight');\n        let font = isInlineCode || isCodeNodeText ? 'Courier' : 'Helvetica';\n        if (isBold || isItalic) {\n            font += '-';\n            if (isBold) {\n                font += 'Bold';\n            }\n            if (isItalic) {\n                font += 'Oblique';\n            }\n        }\n        return {\n            type: 'Text',\n            children: node.getTextContent(),\n            style: {\n                fontFamily: font,\n                textDecoration: node.hasFormat('underline')\n                    ? 'underline'\n                    : node.hasFormat('strikethrough')\n                        ? 'line-through'\n                        : undefined,\n                backgroundColor: isInlineCode ? '#f1f1f1' : isHighlight ? 'rgb(255,255,0)' : undefined,\n                fontSize: isInlineCode || isCodeNodeText ? 11 : undefined,\n                textAlign: $isElementNode(parent) ? getNodeTextAlignment(parent) : 'left',\n            },\n        };\n    }\n    if ($isCodeNode(node)) {\n        const children = node.getChildren();\n        const lines = [[]];\n        for (let i = 0, currentLine = 0; i < children.length; i++) {\n            const child = children[i];\n            if (!$isLineBreakNode(child)) {\n                lines[currentLine].push(child);\n            }\n            else {\n                lines.push([]);\n                currentLine++;\n            }\n        }\n        return {\n            type: 'View',\n            style: [\n                styles.column,\n                {\n                    backgroundColor: 'rgba(0,0,0,0.05)',\n                    padding: 12,\n                    borderRadius: 6,\n                    fontFamily: 'Courier',\n                },\n            ],\n            children: lines.map((line) => {\n                return {\n                    type: 'View',\n                    style: [styles.row, styles.wrap],\n                    children: line.map((child) => {\n                        return getPDFDataNodeFromLexicalNode(child);\n                    }),\n                };\n            }),\n        };\n    }\n    if ($isInlineFileNode(node) || $isRemoteImageNode(node)) {\n        if (!node.__src.startsWith('data:')) {\n            return {\n                type: 'View',\n                style: styles.block,\n                children: [\n                    {\n                        type: 'Link',\n                        src: node.__src,\n                        children: node.__src,\n                    },\n                ],\n            };\n        }\n        return {\n            type: 'Image',\n            src: node.__src,\n        };\n    }\n    const children = $isElementNode(node) || $isTableNode(node) || $isTableCellNode(node) || $isTableRowNode(node)\n        ? node.getChildren().map((child) => {\n            return getPDFDataNodeFromLexicalNode(child);\n        })\n        : undefined;\n    if ($isLinkNode(node)) {\n        return {\n            type: 'Link',\n            src: node.getURL(),\n            children,\n        };\n    }\n    if ($isListItemNode(node)) {\n        if (!$isListNode(parent)) {\n            return null;\n        }\n        const listType = parent.getListType();\n        const isNestedList = node.getChildren().some((child) => $isListNode(child));\n        if (isNestedList) {\n            return {\n                type: 'View',\n                style: [\n                    styles.column,\n                    {\n                        marginLeft: 10,\n                    },\n                ],\n                children,\n            };\n        }\n        return getListItemNode({\n            children,\n            listType,\n            value: node.getValue(),\n            checked: node.getChecked(),\n        });\n    }\n    if ($isListNode(node)) {\n        return {\n            type: 'View',\n            style: [\n                styles.column,\n                {\n                    gap: 7,\n                },\n            ],\n            children,\n        };\n    }\n    if ($isCollapsibleContentNode(node)) {\n        return {\n            type: 'View',\n            style: [\n                styles.block,\n                styles.column,\n                {\n                    padding: 6,\n                },\n            ],\n            children,\n        };\n    }\n    if ($isCollapsibleContainerNode(node)) {\n        return {\n            type: 'View',\n            style: [\n                styles.column,\n                {\n                    backgroundColor: 'rgba(0,0,0,0.05)',\n                    borderRadius: 6,\n                },\n            ],\n            children,\n        };\n    }\n    if ($isParagraphNode(node) && node.getTextContent().length === 0) {\n        return null;\n    }\n    if ($isTableCellNode(node)) {\n        return {\n            type: 'View',\n            style: {\n                backgroundColor: node.hasHeader() ? '#f4f5f7' : undefined,\n                borderColor: '#e3e3e3',\n                borderWidth: 1,\n                flex: 1,\n                padding: 2,\n            },\n            children,\n        };\n    }\n    if ($isTableRowNode(node)) {\n        return {\n            type: 'View',\n            style: styles.row,\n            children,\n        };\n    }\n    if ($isTableNode(node)) {\n        return {\n            type: 'View',\n            children,\n        };\n    }\n    if ($isElementNode(node)) {\n        return {\n            type: 'View',\n            style: [\n                styles.block,\n                styles.row,\n                styles.wrap,\n                {\n                    fontSize: $isHeadingNode(node) ? getFontSizeForHeading(node) : undefined,\n                },\n                $isCollapsibleTitleNode(node) ? styles.collapsibleTitle : {},\n                $isQuoteNode(node) ? styles.quote : {},\n            ],\n            children: [\n                {\n                    type: 'Text',\n                    style: {\n                        lineHeight: $isHeadingNode(node) ? 1 : 1.5,\n                    },\n                    children,\n                },\n            ],\n        };\n    }\n    return {\n        type: 'View',\n        style: [styles.block, styles.row, styles.wrap],\n        children: [{ type: 'Text', children: node.getTextContent() }],\n    };\n};\nconst getPDFDataNodesFromLexicalNodes = (nodes) => {\n    return nodes.map(getPDFDataNodeFromLexicalNode);\n};\nconst PDFWorkerComlink = wrap(new Worker(new URL('./PDFWorker.tsx', import.meta.url)));\n/**\n * @returns The PDF as an object url\n */\nexport function $generatePDFFromNodes(editor, pageSize) {\n    return new Promise((resolve) => {\n        editor.getEditorState().read(() => {\n            const root = $getRoot();\n            const nodes = root.getChildren();\n            const pdfDataNodes = getPDFDataNodesFromLexicalNodes(nodes);\n            void PDFWorkerComlink.renderPDF(pdfDataNodes, pageSize).then((blob) => {\n                const url = URL.createObjectURL(blob);\n                resolve(url);\n            });\n        });\n    });\n}\n"],"names":["styles","StyleSheet","create","page","paddingVertical","paddingHorizontal","lineHeight","fontSize","gap","block","wrap","flexWrap","row","flexDirection","column","listMarker","flexShrink","height","marginRight","collapsibleTitle","backgroundColor","paddingTop","paddingBottom","borderTopLeftRadius","borderTopRightRadius","quote","borderLeftWidth","color","borderLeftColor","paddingLeft","getNodeTextAlignment","node","formatType","getFormatType","getPDFDataNodeFromLexicalNode","parent","getParent","$isLineBreakNode","type","children","$isTextNode","isInlineCode","hasFormat","isCodeNodeText","$isCodeNode","isBold","isItalic","isHighlight","font","getTextContent","style","fontFamily","textDecoration","undefined","textAlign","$isElementNode","getChildren","lines","i","currentLine","length","child","push","padding","borderRadius","map","line","$isInlineFileNode","$isRemoteImageNode","__src","startsWith","src","$isTableNode","$isTableCellNode","$isTableRowNode","$isLinkNode","getURL","$isListItemNode","$isListNode","listType","getListType","some","marginLeft","_ref","value","checked","marker","concat","width","borderWidth","borderColor","viewBox","fill","d","flex","getListItemNode","getValue","getChecked","$isCollapsibleContentNode","$isCollapsibleContainerNode","$isParagraphNode","hasHeader","$isHeadingNode","heading","parseInt","getTag","slice","$isCollapsibleTitleNode","$isQuoteNode","getPDFDataNodesFromLexicalNodes","nodes","PDFWorkerComlink","Worker","URL","$generatePDFFromNodes","editor","pageSize","Promise","resolve","getEditorState","read","$getRoot","pdfDataNodes","renderPDF","then","blob","url","createObjectURL"],"sourceRoot":""}