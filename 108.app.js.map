{"version":3,"file":"./108.app.js","mappings":"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","sources":["webpack://@standardnotes/web/../clipper/src/utils/sendMessageToActiveTab.ts","webpack://@standardnotes/web/./src/javascripts/Components/ClipperView/getSuperJSONFromClipHTML.tsx","webpack://@standardnotes/web/./src/javascripts/Components/ClipperView/ClippedNoteView.tsx","webpack://@standardnotes/web/./src/javascripts/Components/ClipperView/ClipperView.tsx","webpack://@standardnotes/web/../clipper/src/types/message.ts"],"sourcesContent":["import { tabs } from 'webextension-polyfill';\nexport default async function sendMessageToActiveTab(message) {\n    const [activeTab] = await tabs.query({ active: true, currentWindow: true, windowType: 'normal' });\n    if (!activeTab || !activeTab.id) {\n        return;\n    }\n    return await tabs.sendMessage(activeTab.id, message);\n}\n","import { $createParagraphNode, $getRoot, $insertNodes, $nodesOfType } from 'lexical';\nimport { $generateNodesFromDOM } from '@lexical/html';\nimport { createHeadlessEditor } from '@lexical/headless';\nimport { BlockEditorNodes } from '../SuperEditor/Lexical/Nodes/AllNodes';\nimport BlocksEditorTheme from '../SuperEditor/Lexical/Theme/Theme';\nimport { LinkNode } from '@lexical/link';\nconst AbsoluteLinkRegExp = new RegExp('^(?:[a-z+]+:)?//', 'i');\nexport const getSuperJSONFromClipPayload = async (clipPayload) => {\n    const editor = createHeadlessEditor({\n        namespace: 'BlocksEditor',\n        theme: BlocksEditorTheme,\n        editable: false,\n        onError: (error) => console.error(error),\n        nodes: [...BlockEditorNodes],\n    });\n    const clipURL = new URL(clipPayload.url);\n    await new Promise((resolve) => {\n        editor.update(() => {\n            const parser = new DOMParser();\n            const clipSourceDOM = parser.parseFromString(`<p>Clip source: <a href=\"${clipPayload.url}\">${clipPayload.url}</a></p>`, 'text/html');\n            const clipSourceParagraphNode = $generateNodesFromDOM(editor, clipSourceDOM).concat($createParagraphNode(), $createParagraphNode());\n            $getRoot().select();\n            $insertNodes(clipSourceParagraphNode);\n            if (typeof clipPayload.content !== 'string') {\n                throw new Error('Clip payload content is not a string');\n            }\n            const dom = parser.parseFromString(clipPayload.content, 'text/html');\n            const generatedNodes = $generateNodesFromDOM(editor, dom);\n            const nodesToInsert = [];\n            generatedNodes.forEach((node) => {\n                const type = node.getType();\n                // Wrap text & link nodes with paragraph since they can't\n                // be top-level nodes in Super\n                if (type === 'text' || type === 'link') {\n                    const paragraphNode = $createParagraphNode();\n                    paragraphNode.append(node);\n                    nodesToInsert.push(paragraphNode);\n                    return;\n                }\n                else {\n                    nodesToInsert.push(node);\n                }\n                nodesToInsert.push($createParagraphNode());\n            });\n            $getRoot().selectEnd();\n            $insertNodes(nodesToInsert.concat($createParagraphNode()));\n            resolve();\n        });\n    });\n    await new Promise((resolve) => {\n        editor.update(() => {\n            $nodesOfType(LinkNode).forEach((linkNode) => {\n                const url = linkNode.getURL();\n                const isAbsoluteLink = AbsoluteLinkRegExp.test(url);\n                if (!isAbsoluteLink) {\n                    const fixedURL = new URL(url, clipURL);\n                    linkNode.setURL(fixedURL.toString());\n                }\n            });\n            resolve();\n        });\n    });\n    return JSON.stringify(editor.getEditorState().toJSON());\n};\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { useApplication } from '../ApplicationProvider';\nimport Icon from '../Icon/Icon';\nimport { confirmDialog } from '@standardnotes/ui-services';\nimport { BlocksEditorComposer } from '../SuperEditor/BlocksEditorComposer';\nimport { BlocksEditor } from '../SuperEditor/BlocksEditor';\nimport { NoteSyncController } from '@/Controllers/NoteSyncController';\nimport LinkedItemBubblesContainer from '../LinkedItems/LinkedItemBubblesContainer';\nimport Button from '../Button/Button';\nimport Spinner from '../Spinner/Spinner';\nconst ClippedNoteView = ({ note, linkingController, clearClip, isFirefoxPopup, }) => {\n    const application = useApplication();\n    const syncController = useRef(new NoteSyncController(note, application.items, application.mutator, application.sessions, application.sync, application.alerts, application.isNativeMobileWebUseCase));\n    useEffect(() => {\n        const currentController = syncController.current;\n        return () => {\n            currentController.deinit();\n        };\n    }, []);\n    const [title, setTitle] = useState(() => note.title);\n    useEffect(() => {\n        void syncController.current.saveAndAwaitLocalPropagation({\n            title,\n            isUserModified: true,\n            dontGeneratePreviews: true,\n        });\n    }, [application.items, title]);\n    const handleChange = useCallback(async (value, preview) => {\n        void syncController.current.saveAndAwaitLocalPropagation({\n            text: value,\n            isUserModified: true,\n            previews: {\n                previewPlain: preview,\n                previewHtml: undefined,\n            },\n        });\n    }, []);\n    const [isDiscarding, setIsDiscarding] = useState(false);\n    const discardNote = useCallback(async () => {\n        if (await confirmDialog({\n            text: 'Are you sure you want to discard this clip?',\n            confirmButtonText: 'Discard',\n            confirmButtonStyle: 'danger',\n        })) {\n            setIsDiscarding(true);\n            application.mutator\n                .deleteItem(note)\n                .then(() => application.sync.sync())\n                .then(() => {\n                if (isFirefoxPopup) {\n                    window.close();\n                }\n                clearClip();\n            })\n                .catch(console.error)\n                .finally(() => setIsDiscarding(false));\n        }\n    }, [application.mutator, application.sync, clearClip, isFirefoxPopup, note]);\n    return (_jsxs(\"div\", { className: \"\", children: [_jsxs(\"div\", { className: \"border-b border-border p-3\", children: [_jsxs(\"div\", { className: \"mb-3 flex w-full items-center gap-3\", children: [!isFirefoxPopup && (_jsxs(Button, { className: \"flex items-center justify-center\", fullWidth: true, onClick: clearClip, disabled: isDiscarding, children: [_jsx(Icon, { type: \"arrow-left\", className: \"mr-2\" }), \"Back\"] })), _jsx(Button, { className: \"flex items-center justify-center\", fullWidth: true, primary: true, colorStyle: \"danger\", onClick: discardNote, disabled: isDiscarding, children: isDiscarding ? (_jsx(Spinner, { className: \"h-6 w-6 text-danger-contrast\" })) : (_jsxs(_Fragment, { children: [_jsx(Icon, { type: \"trash-filled\", className: \"mr-2\" }), \"Discard\"] })) })] }), _jsx(\"input\", { className: \"w-full text-base font-semibold\", type: \"text\", value: title, onChange: (event) => {\n                            setTitle(event.target.value);\n                        } }), _jsx(LinkedItemBubblesContainer, { linkingController: linkingController, item: note, hideToggle: true })] }), _jsx(\"div\", { className: \"p-3\", children: _jsx(BlocksEditorComposer, { initialValue: note.text, children: _jsx(BlocksEditor, { onChange: handleChange }) }) })] }));\n};\nexport default ClippedNoteView;\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useState } from 'react';\nimport { AccountMenuPane } from '../AccountMenu/AccountMenuPane';\nimport MenuPaneSelector from '../AccountMenu/MenuPaneSelector';\nimport { useApplication } from '../ApplicationProvider';\nimport Icon from '../Icon/Icon';\nimport Menu from '../Menu/Menu';\nimport MenuItem from '../Menu/MenuItem';\nimport { storage as extensionStorage, runtime, windows } from 'webextension-polyfill';\nimport sendMessageToActiveTab from '@standardnotes/clipper/src/utils/sendMessageToActiveTab';\nimport { RuntimeMessageTypes } from '@standardnotes/clipper/src/types/message';\nimport { confirmDialog } from '@standardnotes/ui-services';\nimport { ApplicationEvent, ContentType, NativeFeatureIdentifier, FeatureStatus, NoteType, PrefKey, classNames, } from '@standardnotes/snjs';\nimport { addToast, ToastType } from '@standardnotes/toast';\nimport { getSuperJSONFromClipPayload } from './getSuperJSONFromClipHTML';\nimport ClippedNoteView from './ClippedNoteView';\nimport { PremiumFeatureIconClass, PremiumFeatureIconName } from '../Icon/PremiumFeatureIcon';\nimport Button from '../Button/Button';\nimport { useStateRef } from '@/Hooks/useStateRef';\nimport usePreference from '@/Hooks/usePreference';\nimport { createLinkFromItem } from '@/Utils/Items/Search/createLinkFromItem';\nimport ItemSelectionDropdown from '../ItemSelectionDropdown/ItemSelectionDropdown';\nimport LinkedItemBubble from '../LinkedItems/LinkedItemBubble';\nimport StyledTooltip from '../StyledTooltip/StyledTooltip';\nimport MenuSwitchButtonItem from '../Menu/MenuSwitchButtonItem';\nimport Spinner from '../Spinner/Spinner';\nconst ClipperView = ({ applicationGroup }) => {\n    const application = useApplication();\n    const [currentWindow, setCurrentWindow] = useState();\n    useEffect(() => {\n        windows\n            .getCurrent({\n            populate: true,\n        })\n            .then((window) => {\n            setCurrentWindow(window);\n        })\n            .catch(console.error);\n    }, []);\n    const isFirefoxPopup = !!currentWindow && currentWindow.type === 'popup' && currentWindow.incognito === false;\n    const [user, setUser] = useState(() => application.sessions.getUser());\n    const [isSyncing, setIsSyncing] = useState(false);\n    const [hasSyncError, setHasSyncError] = useState(false);\n    useEffect(() => {\n        application.sessions.refreshSessionIfExpiringSoon().catch(console.error);\n    }, [application.sessions]);\n    const [isEntitledToExtension, setIsEntitled] = useState(() => application.features.getFeatureStatus(NativeFeatureIdentifier.create(NativeFeatureIdentifier.TYPES.Clipper).getValue()) === FeatureStatus.Entitled);\n    const isEntitledRef = useStateRef(isEntitledToExtension);\n    const hasSubscription = application.hasValidFirstPartySubscription();\n    useEffect(() => {\n        return application.addEventObserver(async (event) => {\n            switch (event) {\n                case ApplicationEvent.SignedIn:\n                case ApplicationEvent.SignedOut:\n                case ApplicationEvent.UserRolesChanged:\n                    setUser(application.sessions.getUser());\n                    setIsEntitled(application.features.getFeatureStatus(NativeFeatureIdentifier.create(NativeFeatureIdentifier.TYPES.Clipper).getValue()) === FeatureStatus.Entitled);\n                    break;\n                case ApplicationEvent.FeaturesAvailabilityChanged:\n                    setIsEntitled(application.features.getFeatureStatus(NativeFeatureIdentifier.create(NativeFeatureIdentifier.TYPES.Clipper).getValue()) === FeatureStatus.Entitled);\n                    break;\n                case ApplicationEvent.SyncStatusChanged:\n                case ApplicationEvent.FailedSync: {\n                    const status = application.sync.getSyncStatus();\n                    setIsSyncing(status.syncInProgress);\n                    setHasSyncError(status.hasError());\n                    break;\n                }\n            }\n        });\n    }, [application]);\n    const defaultTagId = usePreference(PrefKey.ClipperDefaultTagUuid);\n    const [defaultTag, setDefaultTag] = useState();\n    const defaultTagRef = useStateRef(defaultTag);\n    useEffect(() => {\n        if (!defaultTagId) {\n            setDefaultTag(undefined);\n            return;\n        }\n        const tag = application.items.findItem(defaultTagId);\n        setDefaultTag(tag);\n    }, [defaultTagId, application]);\n    const selectTag = useCallback((tag) => {\n        void application.setPreference(PrefKey.ClipperDefaultTagUuid, tag.uuid);\n    }, [application]);\n    const unselectTag = useCallback(async () => {\n        void application.setPreference(PrefKey.ClipperDefaultTagUuid, undefined);\n    }, [application]);\n    const [menuPane, setMenuPane] = useState();\n    const activateRegisterPane = useCallback(() => {\n        setMenuPane(AccountMenuPane.Register);\n    }, [setMenuPane]);\n    const activateSignInPane = useCallback(() => {\n        setMenuPane(AccountMenuPane.SignIn);\n    }, [setMenuPane]);\n    const showSignOutConfirmation = useCallback(async () => {\n        if (await confirmDialog({\n            title: 'Sign Out',\n            text: 'Are you sure you want to sign out?',\n            confirmButtonText: 'Sign Out',\n            confirmButtonStyle: 'danger',\n            cancelButtonText: 'Cancel',\n        })) {\n            await application.user.signOut();\n        }\n    }, [application.user]);\n    const [isScreenshotMode, setIsScreenshotMode] = useState(false);\n    useEffect(() => {\n        void sendMessageToActiveTab({\n            type: RuntimeMessageTypes.ToggleScreenshotMode,\n            enabled: isScreenshotMode,\n        });\n    }, [isScreenshotMode]);\n    const [hasSelection, setHasSelection] = useState(false);\n    useEffect(() => {\n        if (!user) {\n            return;\n        }\n        try {\n            const checkIfPageHasSelection = async () => {\n                setHasSelection(Boolean(await sendMessageToActiveTab({ type: RuntimeMessageTypes.HasSelection })));\n            };\n            void checkIfPageHasSelection();\n        }\n        catch (error) {\n            console.error(error);\n        }\n    }, [user]);\n    const [clipPayload, setClipPayload] = useState();\n    useEffect(() => {\n        const getClipFromStorage = async () => {\n            const result = await extensionStorage.local.get('clip');\n            if (!result.clip) {\n                return;\n            }\n            setClipPayload(result.clip);\n            void extensionStorage.local.remove('clip');\n        };\n        void getClipFromStorage();\n    }, []);\n    const clearClip = useCallback(() => {\n        setClipPayload(undefined);\n    }, []);\n    const [clippedNote, setClippedNote] = useState();\n    useEffect(() => {\n        if (!isEntitledRef.current) {\n            return;\n        }\n        async function createNoteFromClip() {\n            if (!clipPayload) {\n                setClippedNote(undefined);\n                return;\n            }\n            if (!clipPayload.content) {\n                addToast({\n                    type: ToastType.Error,\n                    message: 'No content to clip',\n                });\n                return;\n            }\n            if (clipPayload.isScreenshot) {\n                const blob = await fetch(clipPayload.content).then((response) => response.blob());\n                const file = new File([blob], `${clipPayload.title} - ${clipPayload.url}.png`, {\n                    type: 'image/png',\n                });\n                const uploadedFile = await application.filesController.uploadNewFile(file).catch(console.error);\n                if (uploadedFile && defaultTagRef.current) {\n                    await application.linkingController.linkItems(uploadedFile, defaultTagRef.current);\n                }\n                return;\n            }\n            const editorStateJSON = await getSuperJSONFromClipPayload(clipPayload);\n            const note = application.items.createTemplateItem(ContentType.TYPES.Note, {\n                title: clipPayload.title,\n                text: editorStateJSON,\n                editorIdentifier: NativeFeatureIdentifier.TYPES.SuperEditor,\n                noteType: NoteType.Super,\n                references: [],\n            });\n            const insertedNote = await application.mutator.insertItem(note);\n            if (defaultTagRef.current) {\n                await application.linkingController.linkItems(insertedNote, defaultTagRef.current);\n            }\n            setClippedNote(insertedNote);\n            addToast({\n                type: ToastType.Success,\n                message: 'Note clipped successfully',\n            });\n            const syncRequest = await application.sync.getRawSyncRequestForExternalUse([insertedNote]);\n            if (syncRequest) {\n                runtime\n                    .sendMessage({\n                    type: RuntimeMessageTypes.RunHttpRequest,\n                    payload: syncRequest,\n                })\n                    .catch(console.error);\n            }\n        }\n        createNoteFromClip().catch(console.error);\n    }, [\n        application.filesController,\n        application.items,\n        application.linkingController,\n        application.mutator,\n        application.sync,\n        clipPayload,\n        defaultTagRef,\n        isEntitledRef,\n    ]);\n    const upgradePlan = useCallback(async () => {\n        if (hasSubscription) {\n            await application.openSubscriptionDashboard.execute();\n        }\n        else {\n            await application.openPurchaseFlow();\n        }\n        window.close();\n    }, [application, hasSubscription]);\n    if (user && !isEntitledToExtension) {\n        return (_jsxs(\"div\", { className: \"px-3 py-3\", children: [_jsx(\"div\", { className: \"mx-auto mb-5 flex h-24 w-24 items-center justify-center rounded-[50%] bg-contrast\", \"aria-hidden\": true, children: _jsx(Icon, { className: `h-12 w-12 ${PremiumFeatureIconClass}`, size: 'custom', type: PremiumFeatureIconName }) }), _jsx(\"div\", { className: \"mb-1 text-center text-lg font-bold\", children: \"Enable Advanced Features\" }), _jsxs(\"div\", { className: \"mb-3 text-center\", children: [\"To take advantage of \", _jsx(\"span\", { className: \"font-semibold\", children: \"Web Clipper\" }), \" and other advanced features, upgrade your current plan.\"] }), _jsx(Button, { className: \"mb-2\", fullWidth: true, primary: true, onClick: upgradePlan, children: \"Upgrade\" }), _jsx(Button, { fullWidth: true, onClick: showSignOutConfirmation, children: \"Sign out\" })] }));\n    }\n    if (clippedNote) {\n        return (_jsx(ClippedNoteView, { note: clippedNote, linkingController: application.linkingController, clearClip: clearClip, isFirefoxPopup: isFirefoxPopup }, clippedNote.uuid));\n    }\n    if (!user) {\n        return menuPane ? (_jsx(\"div\", { className: \"py-1\", children: _jsx(MenuPaneSelector, { mainApplicationGroup: applicationGroup, menuPane: menuPane, setMenuPane: setMenuPane, closeMenu: () => setMenuPane(undefined) }) })) : (_jsxs(Menu, { a11yLabel: \"User account menu\", children: [_jsxs(MenuItem, { onClick: activateRegisterPane, children: [_jsx(Icon, { type: \"user\", className: \"mr-2 h-6 w-6 text-neutral md:h-5 md:w-5\" }), \"Create free account\"] }), _jsxs(MenuItem, { onClick: activateSignInPane, children: [_jsx(Icon, { type: \"signIn\", className: \"mr-2 h-6 w-6 text-neutral md:h-5 md:w-5\" }), \"Sign in\"] })] }));\n    }\n    return (_jsx(\"div\", { className: \"bg-contrast p-3\", children: _jsxs(Menu, { a11yLabel: \"Extension menu\", className: \"rounded border border-border bg-default\", children: [hasSelection && (_jsxs(MenuItem, { className: \"border-b border-border\", disabled: isScreenshotMode, onClick: async () => {\n                        const payload = await sendMessageToActiveTab({ type: RuntimeMessageTypes.GetSelection });\n                        if (!payload) {\n                            return;\n                        }\n                        setClipPayload(payload);\n                    }, children: [_jsx(Icon, { type: \"paragraph\", className: \"mr-2 text-info\" }), \"Clip text selection\"] })), _jsxs(MenuItem, { onClick: async () => {\n                        const payload = await sendMessageToActiveTab({ type: RuntimeMessageTypes.GetFullPage });\n                        if (!payload) {\n                            return;\n                        }\n                        setClipPayload(payload);\n                    }, children: [_jsx(Icon, { type: \"notes-filled\", className: \"mr-2 text-info\" }), isScreenshotMode ? 'Capture visible' : 'Clip full page'] }), _jsxs(MenuItem, { disabled: isScreenshotMode, onClick: async () => {\n                        const payload = await sendMessageToActiveTab({ type: RuntimeMessageTypes.GetArticle });\n                        if (!payload) {\n                            return;\n                        }\n                        setClipPayload(payload);\n                    }, children: [_jsx(Icon, { type: \"rich-text\", className: \"mr-2 text-info\" }), \"Clip article\"] }), _jsxs(MenuItem, { onClick: async () => {\n                        void sendMessageToActiveTab({ type: RuntimeMessageTypes.StartNodeSelection });\n                        window.close();\n                    }, children: [_jsx(Icon, { type: \"dashboard\", className: \"mr-2 text-info\" }), \"Select elements to \", isScreenshotMode ? 'capture' : 'clip'] }), _jsx(MenuSwitchButtonItem, { checked: isScreenshotMode, onChange: function (checked) {\n                        setIsScreenshotMode(checked);\n                    }, className: \"flex-row-reverse gap-2\", forceDesktopStyle: true, children: \"Clip as screenshot\" }), _jsxs(\"div\", { className: \"border-t border-border px-3 py-3  text-foreground\", children: [defaultTag && (_jsxs(\"div\", { className: \"flex items-center justify-between text-base\", children: [_jsx(LinkedItemBubble, { className: \"m-1 mr-2 min-w-0\", link: createLinkFromItem(defaultTag, 'linked'), unlinkItem: unselectTag, isBidirectional: false }), _jsx(StyledTooltip, { label: \"Remove default tag\", gutter: 2, children: _jsx(\"button\", { className: \"rounded-full p-1 text-neutral hover:bg-contrast hover:text-info\", onClick: unselectTag, children: _jsx(Icon, { type: \"clear-circle-filled\" }) }) })] })), _jsx(ItemSelectionDropdown, { onSelection: selectTag, placeholder: \"Select tag to save clipped notes to...\", contentTypes: [ContentType.TYPES.Tag], className: {\n                                input: 'text-[0.85rem]',\n                            }, comboboxProps: {\n                                placement: 'top',\n                            } })] }), _jsxs(\"div\", { className: \"flex items-center border-t border-border text-foreground\", children: [_jsx(Icon, { type: \"user\", className: \"mx-2\" }), _jsx(\"div\", { className: \"flex-grow py-2 text-sm font-semibold\", children: user.email }), _jsx(\"button\", { className: \"flex-shrink-0 border-l border-border px-2 py-2 hover:bg-info-backdrop focus:bg-info-backdrop focus:shadow-none focus:outline-none\", onClick: showSignOutConfirmation, children: _jsx(Icon, { type: \"signOut\", className: \"text-neutral\" }) })] }), isSyncing || hasSyncError ? (_jsxs(\"div\", { className: classNames('flex items-center border-t border-border', hasSyncError && 'text-danger'), children: [isSyncing && (_jsxs(_Fragment, { children: [_jsx(Spinner, { className: \"mx-2.5 h-4 w-4\" }), _jsx(\"div\", { className: \"flex-grow py-2 text-sm font-semibold text-info\", children: \"Syncing...\" })] })), hasSyncError && (_jsxs(_Fragment, { children: [_jsx(Icon, { type: \"warning\", className: \"mx-2.5\" }), _jsx(\"div\", { className: \"flex-grow py-2 text-sm font-semibold\", children: \"Unable to sync\" })] }))] })) : null] }) }));\n};\nexport default ClipperView;\n","export const RuntimeMessageTypes = {\n    GetArticle: 'get-article',\n    GetSelection: 'get-selection',\n    HasSelection: 'has-selection',\n    GetFullPage: 'get-full-page',\n    OpenPopupWithSelection: 'open-popup-with-selection',\n    StartNodeSelection: 'start-node-selection',\n    ToggleScreenshotMode: 'toggle-screenshot-mode',\n    CaptureVisibleTab: 'capture-visible-tab',\n    RunHttpRequest: 'run-http-request',\n};\n"],"names":["async","sendMessageToActiveTab","message","activeTab","tabs","query","active","currentWindow","windowType","id","sendMessage","AbsoluteLinkRegExp","RegExp","_ref","note","linkingController","clearClip","isFirefoxPopup","application","useApplication","syncController","useRef","NoteSyncController","items","mutator","sessions","sync","alerts","isNativeMobileWebUseCase","useEffect","currentController","current","deinit","title","setTitle","useState","saveAndAwaitLocalPropagation","isUserModified","dontGeneratePreviews","handleChange","useCallback","value","preview","text","previews","previewPlain","previewHtml","undefined","isDiscarding","setIsDiscarding","discardNote","confirmDialog","confirmButtonText","confirmButtonStyle","deleteItem","then","window","close","catch","console","error","finally","_jsxs","className","children","Button","fullWidth","onClick","disabled","_jsx","Icon","type","primary","colorStyle","Spinner","_Fragment","onChange","event","target","LinkedItemBubblesContainer","item","hideToggle","BlocksEditorComposer","initialValue","BlocksEditor","applicationGroup","setCurrentWindow","windows","getCurrent","populate","incognito","user","setUser","getUser","isSyncing","setIsSyncing","hasSyncError","setHasSyncError","refreshSessionIfExpiringSoon","isEntitledToExtension","setIsEntitled","features","getFeatureStatus","NativeFeatureIdentifier","create","TYPES","Clipper","getValue","FeatureStatus","Entitled","isEntitledRef","useStateRef","hasSubscription","hasValidFirstPartySubscription","addEventObserver","ApplicationEvent","SignedIn","SignedOut","UserRolesChanged","FeaturesAvailabilityChanged","SyncStatusChanged","FailedSync","status","getSyncStatus","syncInProgress","hasError","defaultTagId","usePreference","PrefKey","ClipperDefaultTagUuid","defaultTag","setDefaultTag","defaultTagRef","tag","findItem","selectTag","setPreference","uuid","unselectTag","menuPane","setMenuPane","activateRegisterPane","AccountMenuPane","Register","activateSignInPane","SignIn","showSignOutConfirmation","cancelButtonText","signOut","isScreenshotMode","setIsScreenshotMode","enabled","hasSelection","setHasSelection","Boolean","checkIfPageHasSelection","clipPayload","setClipPayload","result","extensionStorage","local","get","clip","remove","getClipFromStorage","clippedNote","setClippedNote","content","addToast","ToastType","Error","isScreenshot","blob","fetch","response","file","File","concat","url","uploadedFile","filesController","uploadNewFile","linkItems","editorStateJSON","editor","createHeadlessEditor","namespace","theme","BlocksEditorTheme","editable","onError","nodes","BlockEditorNodes","clipURL","URL","Promise","resolve","update","parser","DOMParser","clipSourceDOM","parseFromString","clipSourceParagraphNode","$generateNodesFromDOM","$createParagraphNode","$getRoot","select","$insertNodes","dom","generatedNodes","nodesToInsert","forEach","node","getType","paragraphNode","append","push","selectEnd","$nodesOfType","LinkNode","linkNode","getURL","test","fixedURL","setURL","toString","JSON","stringify","getEditorState","toJSON","getSuperJSONFromClipPayload","createTemplateItem","ContentType","Note","editorIdentifier","SuperEditor","noteType","NoteType","Super","references","insertedNote","insertItem","Success","syncRequest","getRawSyncRequestForExternalUse","runtime","payload","createNoteFromClip","upgradePlan","openSubscriptionDashboard","execute","openPurchaseFlow","PremiumFeatureIconClass","size","PremiumFeatureIconName","ClippedNoteView","Menu","a11yLabel","MenuItem","MenuSwitchButtonItem","checked","forceDesktopStyle","LinkedItemBubble","link","createLinkFromItem","unlinkItem","isBidirectional","StyledTooltip","label","gutter","ItemSelectionDropdown","onSelection","placeholder","contentTypes","Tag","input","comboboxProps","placement","email","classNames","MenuPaneSelector","mainApplicationGroup","closeMenu"],"sourceRoot":""}